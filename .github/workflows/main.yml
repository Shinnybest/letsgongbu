name: CI/CD

on:
  push:
    branches: [ main ]

env:
  DOCKER_IMAGE: ghcr.io/${{ github.actor }}
  VERSION: ${{ github.sha }}
  NAME: cicd

jobs:
  # 1. Build
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      # a. github repository에서 checkout
      - uses: actions/checkout@v2
      # b. docker build
      - name: Set up docker buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
      # c. cache docker layer
      - name: Cache docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ env.VERSION }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      # d. GitHub container registry에 login 후 build, push
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # e. Build and push
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:latest
  # 2. Deploy
  deploy:
    needs: build  # run after build
    name: Deploy
    runs-on: [ self-hosted, label-go ] # AWS ./configure에서 사용할 label명
    steps:
      # a. Login to github container registry
      - name: Login to ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      # b. docker run : 8080 -> 80 port
      - name: Docker run
        run: |
          docker stop ${{ env.NAME }} && docker rm ${{ env.NAME }} && docker rmi ${{ env.DOCKER_IMAGE }}:latest
          docker run -d -p 80:8080 --name cicd --restart always ${{ env.DOCKER_IMAGE }}:latest
